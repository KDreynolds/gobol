{
  "training_data": [
    { 
      "prompt": "Translate the following COBOL code to Go:\n\nIDENTIFICATION DIVISION.\nPROGRAM-ID. HELLO-WORLD.\nENVIRONMENT DIVISION.\nDATA DIVISION.\nPROCEDURE DIVISION.\n    DISPLAY 'Hello, World!'.\n    STOP RUN.",
      "completion": "Here's the Go equivalent:\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, World!\")\n}"
    },
    {
      "prompt": "Translate the following COBOL code to Go:\n\nIDENTIFICATION DIVISION.\nPROGRAM-ID. CALCULATE-DISCOUNT.\nENVIRONMENT DIVISION.\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 WS-QUANTITY PIC 9(5).\n01 WS-PRICE PIC 9(5)V99.\n01 WS-TOTAL PIC 9(7)V99.\n01 WS-DISCOUNT PIC 9(3)V99.\n01 WS-DISCOUNTED-TOTAL PIC 9(7)V99.\nPROCEDURE DIVISION.\n    DISPLAY 'Enter quantity: '.\n    ACCEPT WS-QUANTITY.\n    DISPLAY 'Enter price: '.\n    ACCEPT WS-PRICE.\n    COMPUTE WS-TOTAL = WS-QUANTITY * WS-PRICE.\n    IF WS-TOTAL > 1000\n        COMPUTE WS-DISCOUNT = WS-TOTAL * 0.1\n    ELSE\n        COMPUTE WS-DISCOUNT = WS-TOTAL * 0.05\n    END-IF.\n    COMPUTE WS-DISCOUNTED-TOTAL = WS-TOTAL - WS-DISCOUNT.\n    DISPLAY 'Total: $' WS-TOTAL.\n    DISPLAY 'Discount: $' WS-DISCOUNT.\n    DISPLAY 'Discounted Total: $' WS-DISCOUNTED-TOTAL.\n    STOP RUN.",
      "completion": "Here's the Go equivalent:\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc main() {\n\tvar quantity int\n\tvar price, total, discount, discountedTotal float64\n\n\tfmt.Print(\"Enter quantity: \")\n\tfmt.Scanln(&quantity)\n\n\tfmt.Print(\"Enter price: \")\n\tfmt.Scanln(&price)\n\n\ttotal = float64(quantity) * price\n\n\tif total > 1000 {\n\t\tdiscount = total * 0.1\n\t} else {\n\t\tdiscount = total * 0.05\n\t}\n\n\tdiscountedTotal = total - discount\n\n\tfmt.Printf(\"Total: $%.2f\\n\", total)\n\tfmt.Printf(\"Discount: $%.2f\\n\", discount)\n\tfmt.Printf(\"Discounted Total: $%.2f\\n\", discountedTotal)\n}"
    },
    {
      "prompt": "Translate the following COBOL code to Go:\n\nIDENTIFICATION DIVISION.\nPROGRAM-ID. LOOP-EXAMPLE.\nENVIRONMENT DIVISION.\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 WS-COUNTER PIC 9(2) VALUE 1.\nPROCEDURE DIVISION.\n    PERFORM 5 TIMES\n        DISPLAY 'Counter: ' WS-COUNTER\n        ADD 1 TO WS-COUNTER\n    END-PERFORM\n    STOP RUN.",
      "completion": "Here's the Go equivalent:\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tcounter := 1\n\tfor i := 0; i < 5; i++ {\n\t\tfmt.Printf(\"Counter: %d\\n\", counter)\n\t\tcounter++\n\t}\n}"
    },
    {
      "prompt": "Translate the following COBOL code to Go:\n\nIDENTIFICATION DIVISION.\nPROGRAM-ID. FILE-READ-EXAMPLE.\nENVIRONMENT DIVISION.\nINPUT-OUTPUT SECTION.\nFILE-CONTROL.\n    SELECT EMPLOYEE-FILE ASSIGN TO 'employees.txt'\n        ORGANIZATION IS LINE SEQUENTIAL.\nDATA DIVISION.\nFILE SECTION.\nFD EMPLOYEE-FILE.\n01 EMPLOYEE-RECORD.\n    05 EMPLOYEE-NAME PIC X(20).\n    05 EMPLOYEE-ID PIC 9(5).\nWORKING-STORAGE SECTION.\n01 WS-EOF PIC A(1).\nPROCEDURE DIVISION.\n    OPEN INPUT EMPLOYEE-FILE\n    PERFORM UNTIL WS-EOF = 'Y'\n        READ EMPLOYEE-FILE\n            AT END\n                MOVE 'Y' TO WS-EOF\n            NOT AT END\n                DISPLAY EMPLOYEE-NAME ' - ' EMPLOYEE-ID\n        END-READ\n    END-PERFORM\n    CLOSE EMPLOYEE-FILE\n    STOP RUN.",
      "completion": "Here's the Go equivalent:\n\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tfile, err := os.Open(\"employees.txt\")\n\tif err != nil {\n\t\tfmt.Println(\"Error opening file:\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tname := strings.TrimSpace(line[:20])\n\t\tid := strings.TrimSpace(line[20:])\n\t\tfmt.Printf(\"%s - %s\\n\", name, id)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\tfmt.Println(\"Error reading file:\", err)\n\t}\n}"
    },
    {
      "prompt": "Translate the following COBOL code to Go:\n\nIDENTIFICATION DIVISION.\nPROGRAM-ID. STRING-EXAMPLE.\nENVIRONMENT DIVISION.\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 WS-STRING1 PIC X(10) VALUE 'Hello'.\n01 WS-STRING2 PIC X(10) VALUE 'World'.\n01 WS-RESULT PIC X(20).\n01 WS-LENGTH PIC 99.\nPROCEDURE DIVISION.\n    STRING WS-STRING1 DELIMITED BY SPACE\n           ' ' DELIMITED BY SIZE\n           WS-STRING2 DELIMITED BY SPACE\n           INTO WS-RESULT\n    END-STRING\n    INSPECT WS-RESULT TALLYING WS-LENGTH FOR CHARACTERS\n        BEFORE INITIAL SPACE\n    DISPLAY 'Combined: ' WS-RESULT\n    DISPLAY 'Length of first word: ' WS-LENGTH\n    STOP RUN.",
      "completion": "Here's the Go equivalent:\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc main() {\n\tstring1 := \"Hello\"\n\tstring2 := \"World\"\n\n\tresult := string1 + \" \" + string2\n\tfmt.Printf(\"Combined: %s\\n\", result)\n\n\tlengthOfFirstWord := len(strings.TrimSpace(string1))\n\tfmt.Printf(\"Length of first word: %d\\n\", lengthOfFirstWord)\n}"
    },
    {
      "prompt": "Translate the following COBOL code to Go:\n\nIDENTIFICATION DIVISION.\nPROGRAM-ID. TABLE-EXAMPLE.\nENVIRONMENT DIVISION.\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 SALES-TABLE.\n    05 SALES OCCURS 5 TIMES PIC 9(5)V99.\n01 TOTAL-SALES PIC 9(7)V99.\n01 I PIC 9.\nPROCEDURE DIVISION.\n    MOVE 1000.00 TO SALES(1)\n    MOVE 2000.50 TO SALES(2)\n    MOVE 1500.75 TO SALES(3)\n    MOVE 3000.25 TO SALES(4)\n    MOVE 2500.00 TO SALES(5)\n    MOVE 0 TO TOTAL-SALES\n    PERFORM VARYING I FROM 1 BY 1 UNTIL I > 5\n        ADD SALES(I) TO TOTAL-SALES\n    END-PERFORM\n    DISPLAY 'Total Sales: $' TOTAL-SALES\n    STOP RUN.",
      "completion": "Here's the Go equivalent:\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tsales := [5]float64{1000.00, 2000.50, 1500.75, 3000.25, 2500.00}\n\ttotalSales := 0.0\n\n\tfor _, sale := range sales {\n\t\ttotalSales += sale\n\t}\n\n\tfmt.Printf(\"Total Sales: $%.2f\\n\", totalSales)\n}"
    },
    {
      "prompt": "Translate the following COBOL code to Go:\n\nIDENTIFICATION DIVISION.\nPROGRAM-ID. SALES-REPORT.\nENVIRONMENT DIVISION.\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 SALES-DATA.\n    05 PRODUCT-NAME PIC X(20) OCCURS 3 TIMES.\n    05 SALES-AMOUNT PIC 9(5)V99 OCCURS 3 TIMES.\n01 TOTAL-SALES PIC 9(7)V99.\n01 AVERAGE-SALE PIC 9(5)V99.\n01 I PIC 9.\nPROCEDURE DIVISION.\n    MOVE 'Product A' TO PRODUCT-NAME(1)\n    MOVE 'Product B' TO PRODUCT-NAME(2)\n    MOVE 'Product C' TO PRODUCT-NAME(3)\n    MOVE 1500.50 TO SALES-AMOUNT(1)\n    MOVE 2300.75 TO SALES-AMOUNT(2)\n    MOVE 1800.25 TO SALES-AMOUNT(3)\n    MOVE 0 TO TOTAL-SALES\n    PERFORM VARYING I FROM 1 BY 1 UNTIL I > 3\n        ADD SALES-AMOUNT(I) TO TOTAL-SALES\n        DISPLAY PRODUCT-NAME(I) ' Sales: $' SALES-AMOUNT(I)\n    END-PERFORM\n    COMPUTE AVERAGE-SALE = TOTAL-SALES / 3\n    DISPLAY 'Total Sales: $' TOTAL-SALES\n    DISPLAY 'Average Sale: $' AVERAGE-SALE\n    STOP RUN.",
      "completion": "Here's the Go equivalent:\n\npackage main\n\nimport \"fmt\"\n\ntype Product struct {\n\tname string\n\tsales float64\n}\n\nfunc main() {\n\tproducts := []Product{\n\t\t{\"Product A\", 1500.50},\n\t\t{\"Product B\", 2300.75},\n\t\t{\"Product C\", 1800.25},\n\t}\n\n\ttotalSales := 0.0\n\tfor _, product := range products {\n\t\ttotalSales += product.sales\n\t\tfmt.Printf(\"%s Sales: $%.2f\\n\", product.name, product.sales)\n\t}\n\n\taverageSale := totalSales / float64(len(products))\n\n\tfmt.Printf(\"Total Sales: $%.2f\\n\", totalSales)\n\tfmt.Printf(\"Average Sale: $%.2f\\n\", averageSale)\n}"
    },
    {
      "prompt": "Translate the following COBOL code to Go:\n\nIDENTIFICATION DIVISION.\nPROGRAM-ID. GRADE-CALCULATOR.\nENVIRONMENT DIVISION.\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 WS-SCORE PIC 999.\n01 WS-GRADE PIC A.\nPROCEDURE DIVISION.\n    DISPLAY 'Enter score (0-100): '\n    ACCEPT WS-SCORE\n    IF WS-SCORE >= 0 AND WS-SCORE <= 100\n        EVALUATE TRUE\n            WHEN WS-SCORE >= 90\n                MOVE 'A' TO WS-GRADE\n            WHEN WS-SCORE >= 80\n                MOVE 'B' TO WS-GRADE\n            WHEN WS-SCORE >= 70\n                MOVE 'C' TO WS-GRADE\n            WHEN WS-SCORE >= 60\n                MOVE 'D' TO WS-GRADE\n            WHEN OTHER\n                MOVE 'F' TO WS-GRADE\n        END-EVALUATE\n        DISPLAY 'Grade: ' WS-GRADE\n    ELSE\n        DISPLAY 'Invalid score'\n    END-IF\n    STOP RUN.",
      "completion": "Here's the Go equivalent:\n\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar score int\n\tfmt.Print(\"Enter score (0-100): \")\n\tfmt.Scan(&score)\n\n\tif score >= 0 && score <= 100 {\n\t\tvar grade string\n\t\tswitch {\n\t\tcase score >= 90:\n\t\t\tgrade = \"A\"\n\t\tcase score >= 80:\n\t\t\tgrade = \"B\"\n\t\tcase score >= 70:\n\t\t\tgrade = \"C\"\n\t\tcase score >= 60:\n\t\t\tgrade = \"D\"\n\t\tdefault:\n\t\t\tgrade = \"F\"\n\t\t}\n\t\tfmt.Printf(\"Grade: %s\\n\", grade)\n\t} else {\n\t\tfmt.Println(\"Invalid score\")\n\t}\n}"
    },
    {
      "prompt": "Translate the following COBOL code to Go:\n\nIDENTIFICATION DIVISION.\nPROGRAM-ID. MULTIPLICATION-TABLE.\nENVIRONMENT DIVISION.\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 WS-I PIC 99.\n01 WS-J PIC 99.\n01 WS-RESULT PIC 9(4).\nPROCEDURE DIVISION.\n    PERFORM VARYING WS-I FROM 1 BY 1 UNTIL WS-I > 5\n        PERFORM VARYING WS-J FROM 1 BY 1 UNTIL WS-J > 5\n            COMPUTE WS-RESULT = WS-I * WS-J\n            DISPLAY WS-I ' x ' WS-J ' = ' WS-RESULT\n        END-PERFORM\n        DISPLAY SPACE\n    END-PERFORM\n    STOP RUN.",
      "completion": "Here's the Go equivalent:\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfor i := 1; i <= 5; i++ {\n\t\tfor j := 1; j <= 5; j++ {\n\t\t\tresult := i * j\n\t\t\tfmt.Printf(\"%d x %d = %d\\n\", i, j, result)\n\t\t}\n\t\tfmt.Println()\n\t}\n}"
    },
    {
      "prompt": "Translate the following COBOL code to Go:\n\nIDENTIFICATION DIVISION.\nPROGRAM-ID. EMPLOYEE-RECORD.\nENVIRONMENT DIVISION.\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 EMPLOYEE-DATA.\n    05 EMPLOYEE-ID PIC 9(5).\n    05 EMPLOYEE-TYPE PIC X.\n    05 EMPLOYEE-DETAILS.\n        10 FULL-TIME-EMPLOYEE.\n            15 SALARY PIC 9(6)V99.\n            15 DEPARTMENT PIC X(20).\n        10 PART-TIME-EMPLOYEE REDEFINES FULL-TIME-EMPLOYEE.\n            15 HOURLY-RATE PIC 9(3)V99.\n            15 HOURS-WORKED PIC 9(3).\n01 WS-OUTPUT PIC X(50).\nPROCEDURE DIVISION.\n    MOVE 12345 TO EMPLOYEE-ID\n    MOVE 'F' TO EMPLOYEE-TYPE\n    MOVE 50000.00 TO SALARY\n    MOVE 'IT' TO DEPARTMENT\n    STRING 'ID: ' EMPLOYEE-ID\n           ', Type: ' EMPLOYEE-TYPE\n           ', Salary: ' SALARY\n           ', Dept: ' DEPARTMENT\n        INTO WS-OUTPUT\n    DISPLAY WS-OUTPUT\n    \n    MOVE 'P' TO EMPLOYEE-TYPE\n    MOVE 15.50 TO HOURLY-RATE\n    MOVE 080 TO HOURS-WORKED\n    STRING 'ID: ' EMPLOYEE-ID\n           ', Type: ' EMPLOYEE-TYPE\n           ', Rate: ' HOURLY-RATE\n           ', Hours: ' HOURS-WORKED\n        INTO WS-OUTPUT\n    DISPLAY WS-OUTPUT\n    STOP RUN.",
      "completion": "Here's the Go equivalent:\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\ntype EmployeeDetails struct {\n\tSalary     float64\n\tDepartment string\n\tHourlyRate float64\n\tHoursWorked int\n}\n\ntype Employee struct {\n\tID   int\n\tType string\n\tDetails EmployeeDetails\n}\n\nfunc main() {\n\t// Full-time employee\n\tftEmployee := Employee{\n\t\tID:   12345,\n\t\tType: \"F\",\n\t\tDetails: EmployeeDetails{\n\t\t\tSalary:     50000.00,\n\t\t\tDepartment: \"IT\",\n\t\t},\n\t}\n\tfmt.Printf(\"ID: %d, Type: %s, Salary: %.2f, Dept: %s\\n\",\n\t\tftEmployee.ID, ftEmployee.Type, ftEmployee.Details.Salary, ftEmployee.Details.Department)\n\n\t// Part-time employee\n\tptEmployee := Employee{\n\t\tID:   12345,\n\t\tType: \"P\",\n\t\tDetails: EmployeeDetails{\n\t\t\tHourlyRate: 15.50,\n\t\t\tHoursWorked: 80,\n\t\t},\n\t}\n\tfmt.Printf(\"ID: %d, Type: %s, Rate: %.2f, Hours: %d\\n\",\n\t\tptEmployee.ID, ptEmployee.Type, ptEmployee.Details.HourlyRate, ptEmployee.Details.HoursWorked)\n}"
    }
  ]
}


